import time
import random
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By  # Th√™m import By
from utils import get_grid_state, interact_with_cell, save_screenshot, log_game_state

def get_neighbors(x, y, grid, rows=30, cols=20):
    """L·∫•y danh s√°ch c√°c √¥ l√¢n c·∫≠n (8 √¥ xung quanh) trong l∆∞·ªõi."""
    neighbors = []
    for i in range(max(0, x-1), min(rows, x+2)):
        for j in range(max(0, y-1), min(cols, y+2)):
            if (i, j) != (x, y):
                neighbors.append((i, j))
    return neighbors

def logical_deduction(grid):
    """√Åp d·ª•ng thu·∫≠t to√°n suy lu·∫≠n logic ƒë·ªÉ t√¨m √¥ an to√†n ho·∫∑c √¥ m√¨n."""
    actions = []
    rows, cols = len(grid), len(grid[0])
    
    for i in range(rows):
        for j in range(cols):
            if grid[i][j] in [1, 2, 3, 4, 5, 6, 7, 8]:  # √î c√≥ s·ªë
                neighbors = get_neighbors(i, j, grid)
                unopened = [n for n in neighbors if grid[n[0]][n[1]] is None]
                mines = [n for n in neighbors if grid[n[0]][n[1]] == "mine"]
                
                if len(unopened) == grid[i][j] - len(mines):
                    for x, y in unopened:
                        if ("mark_mine", x, y) not in actions:
                            actions.append(("mark_mine", x, y))
                
                if len(mines) == grid[i][j]:
                    for x, y in unopened:
                        if ("open_safe", x, y) not in actions:
                            actions.append(("open_safe", x, y))
    
    return actions

def probabilistic_move(grid, total_mines=99):
    """Ch·ªçn √¥ ch∆∞a m·ªü v·ªõi x√°c su·∫•t m√¨n th·∫•p nh·∫•t."""
    unopened = [(i, j) for i in range(len(grid)) for j in range(len(grid[0])) if grid[i][j] is None]
    if not unopened:
        return None
    
    marked_mines = sum(1 for i in range(len(grid)) for j in range(len(grid[0])) if grid[i][j] == "mine")
    remaining_mines = total_mines - marked_mines
    if remaining_mines <= 0:
        return ("open_safe", unopened[0][0], unopened[0][1])
    
    x, y = random.choice(unopened)
    return ("open_safe", x, y)

def solve_minesweeper(driver, max_iterations=100, max_plays=3):
    """H√†m ch√≠nh ƒë·ªÉ gi·∫£i Minesweeper, h·ªó tr·ª£ ch∆°i l·∫°i t·ªëi ƒëa 3 l·∫ßn khi GAME OVER."""
    play_count = 0
    while play_count < max_plays:
        play_count += 1
        log_game_state(f"üîÑ B·∫Øt ƒë·∫ßu l∆∞·ª£t ch∆°i {play_count}/3")
        
        rows, cols = 30, 20
        iteration = 0
        
        # Ch·ªù l∆∞·ªõi kh·ªüi t·∫°o v√† m·ªü √¥ ƒë·∫ßu ti√™n
        time.sleep(1)
        start_x, start_y = random.randint(0, rows-1), random.randint(0, cols-1)
        log_game_state(f"üîÑ M·ªü √¥ ƒë·∫ßu ti√™n ({start_x}, {start_y})")
        interact_with_cell(driver, start_x, start_y, "open_safe")
        time.sleep(2)  # Ch·ªù l∆∞·ªõi c·∫≠p nh·∫≠t
        
        while iteration < max_iterations:
            grid = get_grid_state(driver)
            if grid is None:
                log_game_state("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c l∆∞·ªõi tr√≤ ch∆°i.")
                break
            
            log_game_state(f"Iteration {iteration + 1}:\n{grid_to_string(grid)}")
            
            actions = logical_deduction(grid)
            if not actions:
                log_game_state("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y h√†nh ƒë·ªông logic. Th·ª≠ x√°c su·∫•t...")
                action = probabilistic_move(grid)
                if not action:
                    log_game_state("‚ö†Ô∏è Kh√¥ng c√≤n √¥ ƒë·ªÉ m·ªü. D·ª´ng l∆∞·ª£t ch∆°i.")
                    break
                actions = [action]
            
            for action, x, y in actions:
                interact_with_cell(driver, x, y, action)
                log_game_state(f"Performed {action} at ({x}, {y})")
                time.sleep(0.5)
            
            try:
                page_text = driver.page_source.upper()
                if "YOU WIN" in page_text:
                    log_game_state("üéâ Th·∫Øng tr√≤ ch∆°i!")
                    save_screenshot(driver, f"game_win_{play_count}.png")
                    return True
                elif "GAME OVER" in page_text:
                    log_game_state("üí• Thua tr√≤ ch∆°i!")
                    save_screenshot(driver, f"game_over_{play_count}.png")
                    # T√¨m v√† click n√∫t Play Again
                    try:
                        play_again_button = WebDriverWait(driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'play again')]"))
                        )
                        play_again_button.click()
                        log_game_state("üü¢ ƒê√£ click n√∫t Play Again, chu·∫©n b·ªã l∆∞·ª£t ti·∫øp theo")
                        time.sleep(2)  # Ch·ªù giao di·ªán load l·∫°i
                        break  # Tho√°t v√≤ng l·∫∑p iteration ƒë·ªÉ b·∫Øt ƒë·∫ßu l∆∞·ª£t m·ªõi
                    except TimeoutException:
                        log_game_state("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t Play Again, d·ª´ng ch∆∞∆°ng tr√¨nh")
                        return False
            except Exception as e:
                log_game_state(f"üö´ L·ªói khi ki·ªÉm tra tr·∫°ng th√°i: {e}")
            
            iteration += 1
        
        if iteration >= max_iterations:
            log_game_state("‚ö†Ô∏è ƒê·∫°t gi·ªõi h·∫°n s·ªë v√≤ng l·∫∑p trong l∆∞·ª£t ch∆°i.")
    
    log_game_state("‚ö†Ô∏è ƒê√£ h·∫øt 3 l∆∞·ª£t ch∆°i. D·ª´ng ch∆∞∆°ng tr√¨nh.")
    return False

def grid_to_string(grid):
    """Chuy·ªÉn l∆∞·ªõi th√†nh chu·ªói ƒë·ªÉ ghi log."""
    result = ""
    for row in grid:
        result += " ".join([str(cell) if cell is not None else "." for cell in row]) + "\n"
    return result